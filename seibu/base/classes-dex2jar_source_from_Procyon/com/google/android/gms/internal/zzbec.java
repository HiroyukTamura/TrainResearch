// 
// Decompiled by Procyon v0.5.36
// 

package com.google.android.gms.internal;

import com.google.android.gms.common.api.TransformedResult;
import android.support.annotation.NonNull;
import com.google.android.gms.common.api.ResultTransform;
import com.google.android.gms.common.api.ResultCallback;
import java.util.concurrent.TimeUnit;
import com.google.android.gms.common.api.PendingResult;
import com.google.android.gms.common.api.OptionalPendingResult;
import com.google.android.gms.common.api.Result;

public final class zzbec<R extends Result> extends OptionalPendingResult<R>
{
    private final zzbbe<R> zzaEQ;
    
    public zzbec(final PendingResult<R> pendingResult) {
        if (!(pendingResult instanceof zzbbe)) {
            throw new IllegalArgumentException("OptionalPendingResult can only wrap PendingResults generated by an API call.");
        }
        this.zzaEQ = (zzbbe<R>)pendingResult;
    }
    
    @Override
    public final R await() {
        return this.zzaEQ.await();
    }
    
    @Override
    public final R await(final long n, final TimeUnit timeUnit) {
        return this.zzaEQ.await(n, timeUnit);
    }
    
    @Override
    public final void cancel() {
        this.zzaEQ.cancel();
    }
    
    @Override
    public final R get() {
        if (this.isDone()) {
            return this.await(0L, TimeUnit.MILLISECONDS);
        }
        throw new IllegalStateException("Result is not available. Check that isDone() returns true before calling get().");
    }
    
    @Override
    public final boolean isCanceled() {
        return this.zzaEQ.isCanceled();
    }
    
    @Override
    public final boolean isDone() {
        return this.zzaEQ.isReady();
    }
    
    @Override
    public final void setResultCallback(final ResultCallback<? super R> resultCallback) {
        this.zzaEQ.setResultCallback(resultCallback);
    }
    
    @Override
    public final void setResultCallback(final ResultCallback<? super R> resultCallback, final long n, final TimeUnit timeUnit) {
        this.zzaEQ.setResultCallback(resultCallback, n, timeUnit);
    }
    
    @NonNull
    @Override
    public final <S extends Result> TransformedResult<S> then(@NonNull final ResultTransform<? super R, ? extends S> resultTransform) {
        return this.zzaEQ.then(resultTransform);
    }
    
    @Override
    public final void zza(final zza zza) {
        this.zzaEQ.zza(zza);
    }
    
    @Override
    public final Integer zzpo() {
        return this.zzaEQ.zzpo();
    }
}
